REPLACE PROCEDURE PDATA.FESTLI_CHECK
(
   IN P_ACT_ID  INTEGER
)
SP:BEGIN
DECLARE SQLSTR  VARCHAR(2000);
DECLARE ERROR_CNT INTEGER;
DECLARE P_LAST_NUM INTEGER;
DECLARE P_NOW_NUM INTEGER;
DECLARE I INTEGER;
DECLARE J INTEGER;
DELETE FROM PDATA.FESTLI  WHERE UPDATE_TIME < DATE - 2;
UPDATE PDATA.FESTLI
SET COL_ERROR = '商品設定類型錯誤1.品番2.群番3.單品'
WHERE COL2  NOT IN ('1','2','3') AND INPUT_TYPE = '1'
     AND ACT_ID = P_ACT_ID;
CALL PDATA.P_DROP_TABLE('#CHECKERROR_TEMP');
SET SQLSTR  = '
CREATE VOLATILE TABLE #CHECKERROR_TEMP AS (
SELECT  DISTINCT A.COL3, ''品番代號不存在'' AS COL_ERROR
    FROM PDATA.FESTLI A
	LEFT JOIN PMART.PRD_KND B ON  A.COL3 = B.KND_NO
	WHERE A.INPUT_TYPE = ''1'' AND B.KND_NO IS NULL	
	     AND A.ACT_ID = '+P_ACT_ID+' AND A.COL2 = ''1''
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
UPDATE A
FROM  PDATA.FESTLI  A, #CHECKERROR_TEMP B
SET COL_ERROR = B.COL_ERROR
WHERE A.COL3 = B.COL3 AND A.INPUT_TYPE = '1'
     AND A.ACT_ID = P_ACT_ID AND A.COL2 = '1';
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT COL3
        FROM PDATA.FESTLI
     WHERE ACT_ID = P_ACT_ID AND INPUT_TYPE = '1'
	 GROUP BY COL3 HAVING COUNT(*) > 1) B
SET COL_ERROR = '同一檔期下,不能重複品番代號'
WHERE A.COL3 = B.COL3  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID AND A.COL2 = '1';
CALL PDATA.P_DROP_TABLE('#CHECKERROR_TEMP');
SET SQLSTR  = '
CREATE VOLATILE TABLE #CHECKERROR_TEMP AS (
SELECT  DISTINCT A.COL3, ''群番代號不存在'' AS COL_ERROR
    FROM PDATA.FESTLI A
	LEFT JOIN PMART.PRD_GRP B ON  A.COL3 = B.GRP_NO
	WHERE A.INPUT_TYPE = ''1'' AND B.GRP_NO IS NULL	
	     AND A.ACT_ID = '+P_ACT_ID+' AND A.COL2 = ''2''
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
UPDATE A
FROM  PDATA.FESTLI  A, #CHECKERROR_TEMP B
SET COL_ERROR = B.COL_ERROR
WHERE A.COL3 = B.COL3 AND A.INPUT_TYPE = '1'
     AND A.ACT_ID = P_ACT_ID AND A.COL2 = '2';
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT COL3
        FROM PDATA.FESTLI
     WHERE ACT_ID = P_ACT_ID AND INPUT_TYPE = '1'
	 GROUP BY COL3 HAVING COUNT(*) > 1) B
SET COL_ERROR = '同一檔期下,不能重複群番代號'
WHERE A.COL3 = B.COL3  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID AND A.COL2 = '2';
CALL PDATA.P_DROP_TABLE('#CHECKERROR_TEMP');
SET SQLSTR  = '
CREATE VOLATILE TABLE #CHECKERROR_TEMP AS (
SELECT  DISTINCT A.COL3, ''商品代號不存在'' AS COL_ERROR
    FROM PDATA.FESTLI A
	LEFT JOIN PMART.VW_PBHCMDT B ON  A.COL3 = B.FM_CODE
	WHERE A.INPUT_TYPE = ''1'' AND B.FM_CODE IS NULL	
	     AND A.ACT_ID = '+P_ACT_ID+' AND A.COL2 = ''3''
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
UPDATE A
FROM  PDATA.FESTLI  A, #CHECKERROR_TEMP B
SET COL_ERROR = B.COL_ERROR
WHERE A.COL3 = B.COL3 AND A.INPUT_TYPE = '1'
     AND A.ACT_ID = P_ACT_ID AND A.COL2 = '3';
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT COL3
        FROM PDATA.FESTLI
     WHERE ACT_ID = P_ACT_ID AND INPUT_TYPE = '1'
	 GROUP BY COL3 HAVING COUNT(*) > 1) B
SET COL_ERROR = '同一檔期下,不能重複商品代號'
WHERE A.COL3 = B.COL3  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID AND A.COL2 = '3';
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT 1 COL1, COUNT(DISTINCT COL2) COL2_CNT
        FROM PDATA.FESTLI
     WHERE COL2  IN ('1','2','3') AND INPUT_TYPE = '1'
          AND ACT_ID = P_ACT_ID
   HAVING COUNT(DISTINCT COL2) > 1) B
SET COL_ERROR = '同一檔期下,商品設定類型只能一種'
WHERE A.COL1 = B.COL1  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID;
UPDATE PDATA.FESTLI 
SET COL_ERROR = '價格非數值'
WHERE TO_NUMBER(COL8) IS  NULL
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '1';	
UPDATE PDATA.FESTLI
SET COL_ERROR = '價格不得大於999999'
WHERE TO_NUMBER(COL8) IS  NOT NULL
AND  COL8 > 999999
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '1';
UPDATE PDATA.FESTLI 
SET COL_ERROR = '取貨方式錯誤1.原店,2.他店,3.宅配'
WHERE (NVL(COL9,'') <> '' AND COL9  NOT IN ('1','2','3'))
     AND ACT_ID = P_ACT_ID
     AND INPUT_TYPE = '1' ;
UPDATE PDATA.FESTLI 
SET COL9 = '0'
WHERE NVL(COL9,'') = ''
     AND ACT_ID = P_ACT_ID
     AND INPUT_TYPE = '1' ;
UPDATE PDATA.FESTLI 
SET COL_ERROR = '臨界值(起)非數值'
WHERE TO_NUMBER(COL3) IS  NULL
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '2';	
UPDATE PDATA.FESTLI 
SET COL_ERROR = '臨界值(迄)非數值'
WHERE TO_NUMBER(COL4) IS  NULL
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '2';	
UPDATE PDATA.FESTLI
SET COL_ERROR = '臨界值(起)(迄)不得小於-999999'
WHERE (TO_NUMBER(COL3) IS  NOT NULL AND TO_NUMBER(COL4) IS NOT NULL)
AND (TO_NUMBER(COL3) < -9999999 OR TO_NUMBER(COL4) < -9999999)
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '2';
UPDATE PDATA.FESTLI
SET COL_ERROR = '臨界值(起)(迄)不得大於9999999'
WHERE (TO_NUMBER(COL3) IS  NOT NULL AND TO_NUMBER(COL4) IS NOT NULL)
AND (TO_NUMBER(COL3) > 9999999 OR TO_NUMBER(COL4) > 9999999)
AND ACT_ID = P_ACT_ID AND INPUT_TYPE = '2';
SET I = 0;
SET J = 0;
FOR LOOPVAR AS CUR1 CURSOR FOR
SELECT ACT_ID, COL1,COL2, COL3, COL4
    FROM PDATA.FESTLI
 WHERE INPUT_TYPE = '2' AND ACT_ID = P_ACT_ID  ORDER BY COL1
DO 
IF (I>0) THEN
	IF (P_LAST_NUM = LOOPVAR.COL3 AND J = 0) THEN
		SET P_LAST_NUM = LOOPVAR.COL4 + 1;
	ELSE
		UPDATE PDATA.FESTLI
		SET COL_ERROR = '客單價不連續'
		WHERE INPUT_TYPE = '2'
		AND ACT_ID = P_ACT_ID
		AND COL1 = LOOPVAR.COL1;
		 SET J = 1;
    END IF;
ELSE
SET P_LAST_NUM = LOOPVAR.COL4 + 1;
END IF;
SET I = 1;
END FOR;
SELECT COUNT(*) INTO ERROR_CNT
FROM PDATA.FESTLI
WHERE ACT_ID = P_ACT_ID
     AND COL_ERROR IS NOT NULL;
CALL PDATA.P_DROP_TABLE ('#VT_FESTLI_CHECK');
 IF (ERROR_CNT = 0) THEN 	
DELETE FROM PDATA.FESTL_CLASS WHERE ACT_ID = P_ACT_ID;
DELETE FROM PDATA.FESTL_DIVISION WHERE ACT_ID = P_ACT_ID;
DELETE FROM PDATA.FESTL_BRAND WHERE ACT_ID = P_ACT_ID;
DELETE FROM PDATA.FESTL_PRD_SET WHERE ACT_ID = P_ACT_ID;
DELETE FROM PDATA.FESTL_CSPRG WHERE ACT_ID = P_ACT_ID;
CALL PDATA.P_DROP_TABLE('#TP_TEMP1');
SET SQLSTR  = '
CREATE VOLATILE TABLE #TP_TEMP1 AS (	
SELECT ACT_ID, ROW_NUMBER() OVER (ORDER BY COL5 ASC ) AS CLASS_ID, COL5
   FROM PDATA.FESTLI
WHERE INPUT_TYPE = ''1''
     AND ACT_ID = '+P_ACT_ID+'
	 GROUP BY ACT_ID, COL5
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
CALL PDATA.P_DROP_TABLE('#TP_TEMP2');
SET SQLSTR  = '
CREATE VOLATILE TABLE #TP_TEMP2 AS (	
SELECT A.ACT_ID, B.CLASS_ID, B.COL5, ROW_NUMBER() OVER (ORDER BY B.CLASS_ID, B.COL5, A.COL6 ASC ) AS DIVISION_ID, A.COL6
   FROM PDATA.FESTLI A
   JOIN #TP_TEMP1 B ON A.COL5 = B.COL5
WHERE A.INPUT_TYPE = ''1''
     AND A.ACT_ID = '+P_ACT_ID+'
	 GROUP BY A.ACT_ID, B.CLASS_ID, B.COL5, A.COL6
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
CALL PDATA.P_DROP_TABLE('#TP_TEMP3');
SET SQLSTR  = '
CREATE VOLATILE TABLE #TP_TEMP3 AS (	
SELECT ACT_ID, ROW_NUMBER() OVER (ORDER BY COL7 ASC ) AS BRAND_ID, COL7
   FROM PDATA.FESTLI
WHERE INPUT_TYPE = ''1''
     AND ACT_ID = '+P_ACT_ID+'
	 GROUP BY ACT_ID, COL7
) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS';
EXECUTE IMMEDIATE SQLSTR;
INSERT INTO PDATA.FESTL_CLASS(ACT_ID, CLASS_ID, CLASS_NM)
SELECT ACT_ID, CLASS_ID, COL5
    FROM #TP_TEMP1;
INSERT INTO PDATA.FESTL_DIVISION(ACT_ID, CLASS_ID, DIVISION_ID, DIVISION_NM)
SELECT ACT_ID, CLASS_ID, DIVISION_ID, COL6
    FROM #TP_TEMP2;
INSERT INTO PDATA.FESTL_BRAND(ACT_ID, BRAND_ID, BRAND_NM)
SELECT ACT_ID, BRAND_ID, COL7
FROM #TP_TEMP3;
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT KND_ID, KND_NO, KND_NAME
  FROM PMART.PRD_KND ) B
SET COL3 = TRIM(B.KND_ID)
WHERE A.COL3 = B.KND_NO  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID AND A.COL2 = '1';
INSERT INTO PDATA.FESTL_PRD_SET(ACT_ID, FM_CODE, FM_NAME, CLASS_ID, DIVISION_ID, BRAND_ID, PRICE, GET_ID, UPDATE_TIME)
SELECT A.ACT_ID, A.COL3, A.COL4, 
               B.CLASS_ID,
               C.DIVISION_ID,
			   D.BRAND_ID,
			   A.COL8, A.COL9, DATE
    FROM PDATA.FESTLI  A
	JOIN #TP_TEMP1 B ON A.COL5 = B.COL5
	JOIN #TP_TEMP2 C ON B.CLASS_ID = C.CLASS_ID AND A.COL5 =C.COL5 AND A.COL6 = C.COL6
	JOIN #TP_TEMP3 D ON A.COL7 = D.COL7
 WHERE INPUT_TYPE = '1'
      AND A.ACT_ID = P_ACT_ID AND A.COL2='1';
UPDATE A
FROM  PDATA.FESTLI  A,
(	SELECT GRP_ID, GRP_NO, GRP_NAME
  FROM PMART.PRD_GRP ) B
SET COL3 = TRIM(B.GRP_ID)
WHERE A.COL3 = B.GRP_NO  AND A.INPUT_TYPE = '1'
	 AND A.ACT_ID = P_ACT_ID AND A.COL2 = '2';
INSERT INTO PDATA.FESTL_PRD_SET(ACT_ID, FM_CODE, FM_NAME, CLASS_ID, DIVISION_ID, BRAND_ID, PRICE, GET_ID, UPDATE_TIME)
SELECT A.ACT_ID, A.COL3, A.COL4, 
               B.CLASS_ID,
               C.DIVISION_ID,
			   D.BRAND_ID,
			   A.COL8, A.COL9, DATE
    FROM PDATA.FESTLI  A
	JOIN #TP_TEMP1 B ON A.COL5 = B.COL5
	JOIN #TP_TEMP2 C ON B.CLASS_ID = C.CLASS_ID AND A.COL5 =C.COL5 AND A.COL6 = C.COL6
	JOIN #TP_TEMP3 D ON A.COL7 = D.COL7
 WHERE INPUT_TYPE = '1'
      AND A.ACT_ID = P_ACT_ID AND A.COL2='2';
INSERT INTO PDATA.FESTL_PRD_SET(ACT_ID, FM_CODE, FM_NAME, CLASS_ID, DIVISION_ID, BRAND_ID, PRICE, GET_ID, UPDATE_TIME)
SELECT A.ACT_ID, A.COL3, A.COL4, 
               B.CLASS_ID,
               C.DIVISION_ID,
			   D.BRAND_ID,
			   A.COL8, A.COL9, DATE
    FROM PDATA.FESTLI  A
	JOIN #TP_TEMP1 B ON A.COL5 = B.COL5
	JOIN #TP_TEMP2 C ON B.CLASS_ID = C.CLASS_ID AND A.COL5 =C.COL5 AND A.COL6 = C.COL6
	JOIN #TP_TEMP3 D ON A.COL7 = D.COL7
 WHERE INPUT_TYPE = '1'
      AND A.ACT_ID = P_ACT_ID AND A.COL2='3';
INSERT INTO PDATA.FESTL_CSPRG (ACT_ID, CSPID, CSPRG, SCSP, ECSP)
SELECT ACT_ID, 
               ROW_NUMBER() OVER (ORDER BY COL1 ASC ) AS ID,
               COL2, COL3, COL4
    FROM PDATA.FESTLI
 WHERE INPUT_TYPE = '2' AND ACT_ID = P_ACT_ID;
UPDATE A
FROM  PDATA.FESTL  A,
(	
SELECT DISTINCT ACT_ID, COL2
    FROM PDATA.FESTLI
 WHERE INPUT_TYPE = '1' AND ACT_ID = P_ACT_ID
) B
SET ACT_PRD_TYPE = TRIM(B.COL2)
WHERE A.ACT_ID = B.ACT_ID;
SET SQLSTR = ' CREATE MULTISET VOLATILE TABLE #VT_FESTLI_CHECK AS('
                          +' SELECT 0 AS RETURN_VAL, ''SUCCESS'' AS RETURN_DESCR'						  
						  + ' ) WITH DATA UNIQUE PRIMARY INDEX(RETURN_VAL) ON COMMIT PRESERVE ROWS;';
ELSE
SET SQLSTR = ' CREATE MULTISET VOLATILE TABLE #VT_FESTLI_CHECK AS('
                          +' SELECT 1 AS RETURN_VAL, ''FAIL'' AS RETURN_DESCR'						  
						  + ' ) WITH DATA UNIQUE PRIMARY INDEX(RETURN_VAL) ON COMMIT PRESERVE ROWS;';
END IF;
EXECUTE IMMEDIATE SQLSTR;   
END SP;