REPLACE PROCEDURE PMART.FUNC_YMWD_TIME_ACTIVEW
(
   IN P_ACT_SDATE INTEGER,
   IN P_ACT_EDATE INTEGER,   
   IN P_W_DAY INTEGER
)
SP:BEGIN
	DECLARE SQLSTR  VARCHAR(6000);    
	DECLARE P_SDATE VARCHAR(8);
    DECLARE P_EDATE VARCHAR(8);
	SELECT TRIM(CAST(TO_CHAR(CAST((SUBSTRING(TO_CHAR(L_DAY_ID),1,4)+ '-' +SUBSTRING(TO_CHAR(L_DAY_ID),5,2)+ '-' +SUBSTRING(TO_CHAR(L_DAY_ID),7,2)) AS DATE) +    
		CASE P_W_DAY
	 	WHEN 2 THEN (1 - CASE L_DAY_OF_WEEK WHEN 2 THEN 1 WHEN 3 THEN 2 WHEN 4 THEN 3 WHEN 5 THEN 4 WHEN 6 THEN 5 WHEN 7 THEN 6 WHEN 1 THEN 7 END)                           
		WHEN 3 THEN (1 - CASE L_DAY_OF_WEEK WHEN 3 THEN 1 WHEN 4 THEN 2 WHEN 5 THEN 3 WHEN 6 THEN 4 WHEN 7 THEN 5 WHEN 1 THEN 6 WHEN 2 THEN 7 END)                           
		WHEN 4 THEN (1 - CASE L_DAY_OF_WEEK WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 3 WHEN 7 THEN 4 WHEN 1 THEN 5 WHEN 2 THEN 6 WHEN 3 THEN 7 END)                        
		WHEN 5 THEN (1 - CASE L_DAY_OF_WEEK WHEN 5 THEN 1 WHEN 6 THEN 2 WHEN 7 THEN 3 WHEN 1 THEN 4 WHEN 2 THEN 5 WHEN 3 THEN 6 WHEN 4 THEN 7 END)                          
		WHEN 6  THEN (1 - CASE L_DAY_OF_WEEK WHEN 6 THEN 1 WHEN 7 THEN 2 WHEN 1 THEN 3 WHEN 2 THEN 4 WHEN 3 THEN 5 WHEN 4 THEN 6 WHEN 5 THEN 7 END)                         
		WHEN 7   THEN (1 - CASE L_DAY_OF_WEEK WHEN 7 THEN 1 WHEN 1 THEN 2 WHEN 2 THEN 3 WHEN 3 THEN 4 WHEN 4 THEN 5 WHEN 5 THEN 6 WHEN 6 THEN 7 END)                          
		ELSE  (1 - L_DAY_OF_WEEK) END ) AS INT  )) INTO P_SDATE
	    FROM TIME_D          
	 WHERE L_DAY_ID = P_ACT_SDATE;
	SELECT TRIM(CAST(TO_CHAR(CAST((SUBSTRING(TO_CHAR(L_DAY_ID),1,4)+ '-' +SUBSTRING(TO_CHAR(L_DAY_ID),5,2)+ '-' +SUBSTRING(TO_CHAR(L_DAY_ID),7,2)) AS DATE) +    
		CASE P_W_DAY
	 	WHEN 2 THEN (1 - CASE L_DAY_OF_WEEK WHEN 2 THEN 1 WHEN 3 THEN 2 WHEN 4 THEN 3 WHEN 5 THEN 4 WHEN 6 THEN 5 WHEN 7 THEN 6 WHEN 1 THEN 7 END)                           
		WHEN 3 THEN (1 - CASE L_DAY_OF_WEEK WHEN 3 THEN 1 WHEN 4 THEN 2 WHEN 5 THEN 3 WHEN 6 THEN 4 WHEN 7 THEN 5 WHEN 1 THEN 6 WHEN 2 THEN 7 END)                           
		WHEN 4 THEN (1 - CASE L_DAY_OF_WEEK WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 3 WHEN 7 THEN 4 WHEN 1 THEN 5 WHEN 2 THEN 6 WHEN 3 THEN 7 END)                        
		WHEN 5 THEN (1 - CASE L_DAY_OF_WEEK WHEN 5 THEN 1 WHEN 6 THEN 2 WHEN 7 THEN 3 WHEN 1 THEN 4 WHEN 2 THEN 5 WHEN 3 THEN 6 WHEN 4 THEN 7 END)                          
		WHEN 6  THEN (1 - CASE L_DAY_OF_WEEK WHEN 6 THEN 1 WHEN 7 THEN 2 WHEN 1 THEN 3 WHEN 2 THEN 4 WHEN 3 THEN 5 WHEN 4 THEN 6 WHEN 5 THEN 7 END)                         
		WHEN 7   THEN (1 - CASE L_DAY_OF_WEEK WHEN 7 THEN 1 WHEN 1 THEN 2 WHEN 2 THEN 3 WHEN 3 THEN 4 WHEN 4 THEN 5 WHEN 5 THEN 6 WHEN 6 THEN 7 END)                          
		ELSE  (1 - L_DAY_OF_WEEK) END ) AS INT  )) INTO P_EDATE
	    FROM TIME_D          
	 WHERE L_DAY_ID = P_ACT_EDATE;
    CALL PMART.P_DROP_TABLE ('#VT_TIME_ACTIVEW');
    SET SQLSTR = ' CREATE MULTISET VOLATILE TABLE #VT_TIME_ACTIVEW AS('
						  + ' SELECT TRIM(L_DAY_ID) L_DAY_ID, TRIM(L_DAY_ID_S) L_DAY_ID_S, TRIM(L_DAY_ID_E) L_DAY_ID_E, '
						  + ' TRIM(TO_NUMBER(SUBSTRING(TRIM(L_DAY_ID_S),1,4)) -1911   +  SUBSTRING(TRIM(L_DAY_ID_S),5,4))  L_CDAY_ID_S, '
						  + ' TRIM(TO_NUMBER(SUBSTRING(TRIM(L_DAY_ID_E),1,4)) -1911   +  SUBSTRING(TRIM(L_DAY_ID_E),5,4)) L_CDAY_ID_E, '
						  + '  L_WEEK_ID, WEKDAY '
						  + '	 FROM ( '
						  + ' SELECT A.L_DAY_ID, A.L_DAY_ID_S, '
                          + ' CAST((CAST(SUBSTRING(TRIM(A.L_DAY_ID_S),1,4)   + ''/'' +  SUBSTRING(TRIM(A.L_DAY_ID_S),5,2) + ''/'' + SUBSTRING(TRIM(A.L_DAY_ID_S),7,2) AS DATE FORMAT ''YYYY-MM-DD'') +6 (FORMAT ''YYYYMMDD'' )) AS CHAR(8)) L_DAY_ID_E, '					
						  + ' TRIM(B.L_WEEK_ID) L_WEEK_ID, '
						  + '                SUBSTRING(A.L_DAY_NAME,  CHARINDEX( ''('',A.L_DAY_NAME)) WEKDAY '
						  + '    FROM ( '
						  + '   SELECT  L_DAY_ID, L_DAY_NAME, '
						  + '                         CAST(TO_CHAR(CAST((SUBSTRING(TO_CHAR(L_DAY_ID),1,4)+ ''-'' +SUBSTRING(TO_CHAR(L_DAY_ID),5,2)+ ''-'' +SUBSTRING(TO_CHAR(L_DAY_ID),7,2)) AS DATE) +  '
						  + '                 CASE ' + P_W_DAY + ' WHEN 2 '
						  + '                                 THEN (1 - CASE L_DAY_OF_WEEK WHEN 2 THEN 1 WHEN 3 THEN 2 WHEN 4 THEN 3 WHEN 5 THEN 4 WHEN 6 THEN 5 WHEN 7 THEN 6 WHEN 1 THEN 7 END)  '
						  + '                           WHEN 3 '
						  + '                           THEN (1 - CASE L_DAY_OF_WEEK WHEN 3 THEN 1 WHEN 4 THEN 2 WHEN 5 THEN 3 WHEN 6 THEN 4 WHEN 7 THEN 5 WHEN 1 THEN 6 WHEN 2 THEN 7 END) '
						  + '                           WHEN 4 '
						  + '                           THEN (1 - CASE L_DAY_OF_WEEK WHEN 4 THEN 1 WHEN 5 THEN 2 WHEN 6 THEN 3 WHEN 7 THEN 4 WHEN 1 THEN 5 WHEN 2 THEN 6 WHEN 3 THEN 7 END) '
						  + '                         WHEN 5 '
						  + '                           THEN (1 - CASE L_DAY_OF_WEEK WHEN 5 THEN 1 WHEN 6 THEN 2 WHEN 7 THEN 3 WHEN 1 THEN 4 WHEN 2 THEN 5 WHEN 3 THEN 6 WHEN 4 THEN 7 END) '
						  + '                         WHEN 6 '
						  + '                           THEN (1 - CASE L_DAY_OF_WEEK WHEN 6 THEN 1 WHEN 7 THEN 2 WHEN 1 THEN 3 WHEN 2 THEN 4 WHEN 3 THEN 5 WHEN 4 THEN 6 WHEN 5 THEN 7 END) '
						  + '                         WHEN 7 '
						  + '                           THEN (1 - CASE L_DAY_OF_WEEK WHEN 7 THEN 1 WHEN 1 THEN 2 WHEN 2 THEN 3 WHEN 3 THEN 4 WHEN 4 THEN 5 WHEN 5 THEN 6 WHEN 6 THEN 7 END) '
						  + '                          ELSE  (1 - L_DAY_OF_WEEK) END '
						  + '                 ) AS INT  ) L_DAY_ID_S '
						  + '            FROM TIME_D '
						  + '          WHERE L_DAY_ID BETWEEN ' + P_ACT_SDATE + ' AND ' + P_ACT_EDATE 
						   + ' ) A '
						   + ' LEFT JOIN ( '
						   + '             SELECT  L_DAY_ID,       '
						   + '                1 AS DAY_OF_WEEK, '
						   + '                       ROW_NUMBER() OVER (ORDER BY L_DAY_ID ) AS L_WEEK_ID '
						   + '           FROM TIME_D '
						   + '         WHERE L_DAY_ID BETWEEN  ' + P_SDATE + ' AND ' + P_EDATE
						   + '              AND L_DAY_OF_WEEK = ' + P_W_DAY 
						   + ' ) B ON A.L_DAY_ID_S = B.L_DAY_ID '		
						   + ' ) T '
					+ ' ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
        EXECUTE IMMEDIATE SQLSTR;   
END SP;