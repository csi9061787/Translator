REPLACE PROCEDURE PMART.BI_1_3_FUNC(P_TIME_ID NUMBER,P_LEVEL NUMBER,P_ORG_ID NUMBER,P_PRD_ID NUMBER,P_FILTER_TYPE NUMBER,P_PRD_VALUE NUMBER,P_AVGINPRD NUMBER
,P_C_RATE NUMBER,P_CP_RATE NUMBER)
SQL SECURITY INVOKER
SP:BEGIN
   DECLARE SQLSTR VARCHAR(8000);
   DECLARE FILTER_STR VARCHAR(400);
   CALL PMART.P_DROP_TABLE ('#VT_BI_1_3_FUNC');          
   IF (P_FILTER_TYPE=1) THEN  
      SET FILTER_STR = ' WHERE A.INPRD_CNT < B.SALES_CNT ';
   END IF;
   IF (P_FILTER_TYPE=2) THEN  
      SET FILTER_STR = ' WHERE A.INPRD_CNT>0 AND (A.SALES_CNT)/(A.INPRD_CNT)*100>='+ P_C_RATE +' ';
   END IF;
   IF (P_FILTER_TYPE=3) THEN  
      SET FILTER_STR = ' WHERE A.INPRD_CNT >0 AND A.INPRD_CNT < B.SALES_CNT AND (A.SALES_CNT)/(A.INPRD_CNT)*100 >= 100 ';
   END IF;
   IF (P_FILTER_TYPE=4) THEN  
      SET FILTER_STR = ' WHERE A.INPRD_CNT >0 AND B.INPRD_CNT>0 '+
                       '   AND (A.SALES_CNT)/(A.INPRD_CNT)*100>='+ P_CP_RATE +
                       '   AND (B.SALES_CNT)/(B.INPRD_CNT)*100>='+ P_CP_RATE +
                       '   AND (A.INPRD_CNT >0 AND A.INPRD_CNT < B.SALES_CNT) ';
   END IF;
   IF (P_FILTER_TYPE=5) THEN  
      SET FILTER_STR = ' WHERE AVGINPRD <= '+P_AVGINPRD ;
   END IF;  
   CALL PMART.BI_1_3_S1_FUNC(P_TIME_ID,P_LEVEL,P_ORG_ID,P_PRD_ID,P_PRD_VALUE) ;
   CALL PMART.BI_1_3_S2_FUNC(P_TIME_ID,P_LEVEL,P_ORG_ID,P_PRD_ID,P_PRD_VALUE) ;
   CALL PMART.BI_1_3_ST_FUNC(P_LEVEL,P_ORG_ID) ;
   CALL PMART.BI_1_3_S3_FUNC(P_TIME_ID) ;
   SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_BI_1_3_FUNC  AS('+
               'SELECT  AA.TIME_ID,AA.ORG_ID,AA.STORE_NM,AA.MMA_NM,AA.PRD_ID' +
               ' ,AA.C_ORDER_CNT,AA.C_INPRD_CNT,AA.C_SALES_CNT,AA.C_THROW_CNT,AA.C_RATE' +
               ' ,AA.P_ORDER_CNT,AA.P_INPRD_CNT,AA.P_SALES_CNT,AA.P_THROW_CNT,AA.P_RATE' +
               ' ,AA.RESPON_NM,AA.BRANCH_NM,AA.DEPT_NM,AA.DEPT_ID,AA.BRANCH_ID,AA.RESPON_ID' +
               ' FROM ( ' +
               'SELECT A.TIME_ID, A.ORG_ID,S.STORE_NM,S.MMA_NM,A.PRD_ID, '+
               'CASE WHEN T.STNUM = 0 THEN A.ORDER_CNT ELSE A.ORDER_CNT/T.STNUM END AS C_ORDER_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN A.SALES_CNT ELSE A.SALES_CNT/T.STNUM END AS C_SALES_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN A.THROW_CNT ELSE A.THROW_CNT/T.STNUM END AS C_THROW_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN A.INPRD_CNT ELSE A.INPRD_CNT/T.STNUM END AS C_INPRD_CNT, '+
               'CASE WHEN A.INPRD_CNT IS NULL OR A.INPRD_CNT=0 THEN 0 ELSE (A.SALES_CNT)/(A.INPRD_CNT)*100 END AS C_RATE, '+
               'CASE WHEN T.STNUM = 0 THEN B.ORDER_CNT ELSE B.ORDER_CNT/T.STNUM END AS P_ORDER_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN B.SALES_CNT ELSE B.SALES_CNT/T.STNUM END AS P_SALES_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN B.THROW_CNT ELSE B.THROW_CNT/T.STNUM END AS P_THROW_CNT, '+
               'CASE WHEN T.STNUM = 0 THEN B.INPRD_CNT ELSE B.INPRD_CNT/T.STNUM END AS P_INPRD_CNT, '+
               'CASE WHEN B.INPRD_CNT IS NULL OR B.INPRD_CNT=0 THEN 0 ELSE (B.SALES_CNT)/(B.INPRD_CNT)*100 END AS P_RATE, '+
               'S.RESPON_NM,S.BRANCH_NM,S.DEPT_NM,S.DEPT_ID,S.BRANCH_ID,S.RESPON_ID, '+	
               'CASE WHEN T.STNUM = 0 THEN 0 ELSE A.INPRD_CNT/T.STNUM END AS AVGINPRD '+
               'FROM #VT_BI_1_3_S1_FUNC A '+
               'LEFT OUTER JOIN '+
               '      #VT_BI_1_3_S2_FUNC B '+
               'ON (A.ORG_ID=B.ORG_ID AND A.PRD_ID=B.PRD_ID) '+
               'INNER JOIN '+
               '      #VT_BI_1_3_ST_FUNC S '+
               'ON (A.ORG_ID = S.STORE_ID) '+
               'INNER JOIN '+
               '      #VT_BI_1_3_S3_FUNC T '+
               'ON (A.ORG_ID = T.OSTORE_ID) '+               
               FILTER_STR +
               ' ) AA '+
               ') WITH DATA PRIMARY INDEX ( DEPT_ID,BRANCH_ID,RESPON_ID ) ON COMMIT PRESERVE ROWS;';      
	       EXECUTE IMMEDIATE SQLSTR;
END SP;