REPLACE PROCEDURE PMART.OLD0401_WDWH_4_1_RPT_FUNC
(
   IN I_ORG_TYPE  VARCHAR(2),   
   IN I_ORG_ID    INTEGER,      
   IN I_DAY_ID    INTEGER,      
   IN I_KND_ID    INTEGER,     
   IN I_GRP_ID    INTEGER       
)
SQL SECURITY INVOKER
SP:BEGIN
  DECLARE M_SQLSTR     VARCHAR(4000) DEFAULT '';
  DECLARE M_SQLJOIN     VARCHAR(200) DEFAULT '';
  DECLARE M_SQLGROUP     VARCHAR(200) DEFAULT '';
  DECLARE M_SQLSELECT     VARCHAR(100) DEFAULT '';
  DECLARE M_SQLKGQRY     VARCHAR(100) DEFAULT '';
  DECLARE V_D_FLAG  VARCHAR(1) DEFAULT 'T';   
  DECLARE V_LAST_7    INTEGER;
  DECLARE V_LAST_14   INTEGER;
  DECLARE V_TODAY   INTEGER;
  SET V_LAST_7  = '' ;
  SET V_LAST_14 = '' ;
IF  I_ORG_TYPE  <>  '5'  THEN
		SELECT  CAST(CAST(L_DAY_ID AS DATE )-6  AS INTEGER)  ,
		              CAST(CAST(L_DAY_ID AS DATE )-13  AS INTEGER)   
		INTO V_LAST_7,V_LAST_14
		FROM PMART.YMWD_TIME
		WHERE L_DAY_ID = I_DAY_ID ; 
 END IF;
  CALL PMART.P_DROP_TABLE ('#VT_WDWH_4_1_RPT_FUNC_DAY');
  CALL PMART.P_DROP_TABLE ('#VT_WDWH_4_1_RPT_FUNC_ORG');
  CALL PMART.P_DROP_TABLE ('#VT_WDWH_4_1_RPT_FUNC_RPT');
   IF I_DAY_ID <> CAST(CURRENT_DATE AS INTEGER)+19000000 THEN
		SET V_D_FLAG = 'F';
   ELSE
		SET V_D_FLAG = 'T';
   END IF;
		CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_DAY AS
		(
		SELECT *
	    FROM (SELECT L_DAY_ID, L_DAY_ID AS L_DATA_DAY_ID, 0 AS LAST_WEEK
	                   FROM PMART.YMWD_TIME
	                   WHERE L_DAY_ID >= ''+ V_LAST_7 +'' AND L_DAY_ID <= ''+ I_DAY_ID +''
	                   UNION ALL
	                   SELECT L_DAY_ID, L_DAY_LAST_WEEK AS L_DATA_DAY_ID, 1 AS LAST_WEEK
	                   FROM PMART.YMWD_TIME
	                   WHERE L_DAY_ID >= ''+ V_LAST_7+'' AND L_DAY_ID <= ''+ I_DAY_ID +'') AS A
	    ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 
   IF (I_ORG_TYPE = '-1') THEN
			CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID  AS ORG_ID FROM PMART.LAST_ORG_DIM
                    UNION ALL
                    SELECT DISTINCT  1 AS ORG_LEVEL, DEPT_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE TOT_ID = '' + I_ORG_ID + ''
             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 
   END IF;
   IF (I_ORG_TYPE = '1') THEN
			CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM
                    UNION ALL
                    SELECT DISTINCT  1 AS ORG_LEVEL, DEPT_ID   AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE DEPT_ID = ''+ I_ORG_ID + ''
                    UNION ALL
                    SELECT DISTINCT  2 AS ORG_LEVEL, BRANCH_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE DEPT_ID = '' + I_ORG_ID + ''
             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 				 
   END IF;
   IF (I_ORG_TYPE = '2') THEN
			CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM
                    UNION ALL
                    SELECT DISTINCT  2 AS ORG_LEVEL, BRANCH_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE BRANCH_ID = ''+ I_ORG_ID + ''
                    UNION ALL
                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE BRANCH_ID = ''+ I_ORG_ID + ''
             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 		
   END IF;
   IF (I_ORG_TYPE = '3') THEN	
			CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
                    UNION ALL
                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
                    UNION ALL
                    SELECT DISTINCT  4 AS ORG_LEVEL, KND_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID=''+ I_ORG_ID + ''
             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 		
   END IF;
    IF (I_ORG_TYPE = '4') THEN
			CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
                    UNION ALL
                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
                    UNION ALL
                    SELECT DISTINCT  5 AS ORG_LEVEL, GRP_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID=''+ I_ORG_ID +''
             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 			 
   END IF;
    IF (I_ORG_TYPE = '5') THEN
	        IF I_GRP_ID = 0 THEN
					CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
		                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
		                    UNION ALL
		                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
		                    UNION ALL
		                    SELECT DISTINCT  6 AS ORG_LEVEL, CAST(B.FM_CODE AS INTEGER)  AS ORG_ID 
							FROM PMART.ORG_DIM_POSI1   AS  A
							INNER JOIN  PMART.PRD_PRD   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
							WHERE A.RESPON_ID=''+ I_ORG_ID +'' AND A.KND_ID = ''+ I_KND_ID +'' 
		             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 		
			ELSE
			     IF  I_KND_ID <>  0 THEN
						CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
			                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
			                    UNION ALL
			                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
			                    UNION ALL
			                    SELECT DISTINCT  6 AS ORG_LEVEL, CAST(B.FM_CODE AS INTEGER)  AS ORG_ID 
								FROM PMART.ORG_DIM_POSI1   AS  A
								INNER JOIN  PMART.PRD_PRD   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
								WHERE A.RESPON_ID=''+ I_ORG_ID +'' AND A.KND_ID = ''+ I_KND_ID +''  AND A.GRP_ID =  ''+ I_GRP_ID +'' 
			             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 	
				ELSE
						CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
			                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
			                    UNION ALL
			                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
			                    UNION ALL
			                    SELECT DISTINCT  6 AS ORG_LEVEL, CAST(B.FM_CODE AS INTEGER)  AS ORG_ID 
								FROM PMART.ORG_DIM_POSI1   AS  A
								INNER JOIN  PMART.PRD_PRD   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
								WHERE A.RESPON_ID=''+ I_ORG_ID +''  AND A.GRP_ID =  ''+ I_GRP_ID +'' 
			             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 					END IF;
			END IF;
   END IF;
   IF (I_ORG_TYPE = '6') THEN
	        IF I_GRP_ID = 0 THEN
					CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
		                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
		                    UNION ALL
		                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1   WHERE SEQNO=1
		                    UNION ALL
		                    SELECT DISTINCT  6 AS ORG_LEVEL, B.PRD_ID  AS ORG_ID 
							FROM PMART.ORG_DIM_POSI1   AS  A
							INNER JOIN  PMART.PRD_DIM   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
							WHERE  A.KND_ID = ''+ I_KND_ID +'' 
		             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 		
			ELSE
			     IF  I_KND_ID <>  0 THEN
						CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
			                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
			                    UNION ALL
			                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
			                    UNION ALL
			                    SELECT DISTINCT  6 AS ORG_LEVEL, B.PRD_ID  AS ORG_ID 
								FROM PMART.ORG_DIM_POSI1   AS  A
								INNER JOIN  PMART.PRD_DIM   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
								WHERE A.KND_ID = ''+ I_KND_ID +''  AND A.GRP_ID =  ''+ I_GRP_ID +'' 
			             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; 	
				ELSE
						CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_ORG AS(	
			                    SELECT DISTINCT -1 AS ORG_LEVEL, TOT_ID    AS ORG_ID FROM PMART.LAST_ORG_DIM 
			                    UNION ALL
			                    SELECT DISTINCT  3 AS ORG_LEVEL, RESPON_ID AS ORG_ID FROM PMART.ORG_DIM_POSI1  WHERE RESPON_ID = '' + I_ORG_ID + ''
			                    UNION ALL
			                    SELECT DISTINCT  6 AS ORG_LEVEL, B.PRD_ID  AS ORG_ID 
								FROM PMART.ORG_DIM_POSI1   AS  A
								INNER JOIN  PMART.PRD_DIM   AS  B ON B.GRP_ID = A.GRP_ID AND B.KND_ID = A.KND_ID 
								WHERE  A.GRP_ID =  ''+ I_GRP_ID +'' 
			             ) WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;
				  END IF;
			END IF;   
   END IF ;
   	SET M_SQLSTR = 'CREATE MULTISET VOLATILE TABLE #VT_WDWH_4_1_RPT_FUNC_RPT AS ( ';
   	IF (I_ORG_TYPE = '-1') THEN
	  		SET M_SQLJOIN =  ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = D.DEPT_ID ';	
			SET M_SQLSELECT = ' D.DEPT_NM AS ORG_NM, ';
    END IF;       
	IF (I_ORG_TYPE = '1') THEN
		  	SET M_SQLJOIN =   ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = D.BRANCH_ID ';
			SET M_SQLSELECT = ' D.BRANCH_NM AS ORG_NM, ';
    END IF;   
	IF (I_ORG_TYPE = '2') THEN
		  	SET M_SQLJOIN =  ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = D.RESPON_ID ';
			SET M_SQLSELECT = ' D.RESPON_NM AS ORG_NM, ';
    END IF;   
	IF (I_ORG_TYPE = '3') THEN
		  	SET M_SQLJOIN =  ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = D.KND_ID ';
			SET M_SQLSELECT = ' F.KND_NAME AS ORG_NM, ';
    END IF;     
	 IF (I_ORG_TYPE = '4') THEN
	  	SET M_SQLJOIN =  ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = D.GRP_ID ';
		SET M_SQLSELECT = ' C.GRP_NAME AS ORG_NM, ';
     END IF; 
	IF (I_ORG_TYPE = '5') OR (I_ORG_TYPE = '6')  THEN
	     IF  V_D_FLAG = 'F' THEN
				 SET M_SQLSTR = M_SQLSTR
				                         + ' SELECT  A.TIME_ID,E.ORG_LEVEL, E.ORG_ID, '
		                                 + '              C.FM_NAME,  G.RESPON_ID, '
						                 + '              CASE WHEN MAX(F.UPLOAD_STNUM) > 0 THEN  SUM(A.SALES_AMT-A.DIS_AMT-A.SUB_AMT)/MAX(CAST(F.UPLOAD_STNUM AS DECIMAL(16,6))) ELSE 0 END AS SALES_AMT_PSD,  '
										 + ' 			   CASE WHEN MAX(F.UPLOAD_STNUM) > 0 THEN  SUM(A.SALES_CNT)/MAX(CAST(F.UPLOAD_STNUM AS DECIMAL(16,6))) ELSE 0 END AS SALES_CNT_PSD   '
										 + ' FROM PMART.BASIC_MFACT_DETAIL AS A  '
										 + ' INNER JOIN PMART.PRD_PRD AS C ON C.FM_CODE = A.PRD_ID '
										 + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = A.PRD_ID '
										 + ' INNER JOIN PMART.BASIC_MFACT_BUDGET AS F ON F.PRD_ID = C.GRP_ID  AND F.TIME_ID = A.TIME_ID '
										 + ' LEFT JOIN PMART.ORG_DIM_POSI1 AS G ON G.GRP_ID=C.GRP_ID AND SEQNO=1  '
										 + ' WHERE  A.TIME_ID = ' +  I_DAY_ID + ' '
										 + ' GROUP BY  A.TIME_ID,E.ORG_LEVEL, E.ORG_ID, C.FM_NAME , G.RESPON_ID ';
		 ELSE	
				 SET M_SQLSTR = M_SQLSTR
				                         + ' SELECT  CAST(CAST(A.TX_DTTM AS DATE) AS INTEGER)+19000000 AS TIME_ID,E.ORG_LEVEL, E.ORG_ID, '
		                                 + '                C.PRD_NM AS FM_NAME,  G.RESPON_ID, '
						                 + '                ISNULL(CAST(SUM((A.AM_ITEM-A.AM_DIS_SUB-A.AM_SUB_SUB)*DWH_FG) AS  DECIMAL(16,6))/S.STORE_NUM) AS SALES_AMT_PSD,  '
										 + ' 			     ISNULL(CAST(SUM(A.QT_ITEM*DWH_FG) AS  DECIMAL(16,6))/S.STORE_NUM) AS SALES_CNT_PSD,   '
						                 + '                SUM((A.AM_ITEM-A.AM_DIS_SUB-A.AM_SUB_SUB)*DWH_FG) AS SALES_AMT,  '
										 + ' 			     SUM(A.QT_ITEM*DWH_FG) AS SALES_CNT   '
										 + ' FROM PMART.ORG_DIM_POSI1 AS G '
										 + ' INNER JOIN PMART.PRD_DIM AS C ON C.GRP_ID = G.GRP_ID AND C.KND_ID = G.KND_ID '
										 + ' INNER JOIN PDATA.TRANS_PRODUCT_DETAIL AS A ON A.CD_FMCODE = C.PRD_ID '
										 + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_ORG AS E ON E.ORG_ID = A.CD_FMCODE '
										 + ' INNER JOIN (SELECT COUNT(*) AS STORE_NUM '
										 + '                       FROM ( SELECT OSTORE_ID '
										 +	'	 								   FROM PDATA.TRANS_PRODUCT_DETAIL '
										 + '								       WHERE CAST(TX_DTTM AS DATE)= CAST(' + I_DAY_ID+ '-19000000 AS DATE)  AND OSTORE_ID IN (SELECT OSTORE_ID FROM  PMART.ORG_DIM) '
										 + '								       GROUP BY OSTORE_ID	) S ) S ON 1=1 '
										 + ' WHERE CAST(A.TX_DTTM AS DATE) = CAST(' + I_DAY_ID+ '-19000000 AS DATE) AND SEQNO=1 '
										 + ' GROUP BY  TIME_ID,E.ORG_LEVEL, E.ORG_ID, FM_NAME , G.RESPON_ID,S.STORE_NUM ';	
		 END IF;
	ELSE
			SET M_SQLGROUP = ' GROUP BY L_DAY_ID,L_DATA_DAY_ID,LAST_WEEK, ORG_LEVEL, ORG_ID, ORG_NM ' ;
			SET M_SQLSTR = M_SQLSTR  
			                 + 'SELECT L_DAY_ID,L_DATA_DAY_ID,LAST_WEEK,ORG_LEVEL, C.ORG_ID, CAST(D.TOT_NM AS VARCHAR(50)) AS ORG_NM, '
			                 + '              CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_AMT-A.DIS_AMT-A.SUB_AMT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_AMT_PSD,  '
							 + ' 			   CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_CNT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_CNT_PSD  '
							 + ' FROM PMART.BASIC_MFACT_BUDGET AS A  '
						     + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_DAY  AS B ON A.TIME_ID = B.L_DAY_ID AND B.LAST_WEEK = 0 '
							 + ' LEFT JOIN #VT_WDWH_4_1_RPT_FUNC_ORG  AS C ON C.ORG_ID = -1 '	
							 + ' LEFT JOIN (SELECT  DISTINCT TOT_NM FROM PMART.LAST_ORG_DIM WHERE TOT_ID=-1  ) AS D ON 1=1' 
							 + M_SQLGROUP ;
			SET M_SQLSTR = M_SQLSTR  
			                 + ' UNION ALL '
			                 + 'SELECT L_DAY_ID,L_DATA_DAY_ID,LAST_WEEK, ORG_LEVEL, C.ORG_ID, CAST(D.TOT_NM AS VARCHAR(50)) AS ORG_NM, '
			                 + '              CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_AMT-A.DIS_AMT-A.SUB_AMT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_AMT_PSD,  '
							 + ' 			   CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_CNT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_CNT_PSD  '
							 + ' FROM PMART.BASIC_MFACT_BUDGET AS A  '
						     + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_DAY  AS B ON A.TIME_ID = B.L_DATA_DAY_ID AND B.LAST_WEEK = 1 '
							 + ' LEFT JOIN #VT_WDWH_4_1_RPT_FUNC_ORG  AS C ON C.ORG_ID = -1 '
							 + ' LEFT JOIN (SELECT  DISTINCT TOT_NM FROM PMART.LAST_ORG_DIM WHERE TOT_ID=-1  ) AS D ON 1=1 ' 							 
							 + M_SQLGROUP ;		
			    SET M_SQLSTR =  M_SQLSTR  
					                     + ' UNION ALL '
										 + ' SELECT L_DAY_ID,L_DATA_DAY_ID,LAST_WEEK, ORG_LEVEL, ORG_ID, ' 
										 + M_SQLSELECT
						                 + '              CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_AMT-A.DIS_AMT-A.SUB_AMT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_AMT_PSD,  '
										 + ' 			   CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_CNT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_CNT_PSD '
										 + ' FROM PMART.BASIC_MFACT_BUDGET AS A  '
									     + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_DAY AS B ON A.TIME_ID = B.L_DAY_ID AND B.LAST_WEEK = 0'
										 + ' INNER JOIN PMART.PRD_GRP AS C ON C.GRP_ID = A.PRD_ID '
										 + ' INNER JOIN  PMART.ORG_DIM_POSI1 AS D ON C.KND_ID=D.KND_ID AND C.GRP_ID=D.GRP_ID '
										 + ' INNER JOIN PMART.PRD_KND AS F ON F.KND_ID = D.KND_ID '
										 + M_SQLJOIN + M_SQLGROUP ;  
			 SET M_SQLSTR =  M_SQLSTR  
					                     + ' UNION ALL '
										 + ' SELECT L_DAY_ID,L_DATA_DAY_ID,LAST_WEEK, ORG_LEVEL, ORG_ID, '
										 + M_SQLSELECT
						                 + '              CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_AMT-A.DIS_AMT-A.SUB_AMT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_AMT_PSD,  '
										 + ' 			   CASE WHEN MAX(A.UPLOAD_STNUM) > 0 THEN  CAST(SUM(A.SALES_CNT)/MAX(CAST(A.UPLOAD_STNUM AS DECIMAL(16,6))) AS DECIMAL(12,2)) ELSE 0 END AS SALES_CNT_PSD '
										 + ' FROM PMART.BASIC_MFACT_BUDGET AS A  '
									     + ' INNER JOIN #VT_WDWH_4_1_RPT_FUNC_DAY AS B ON A.TIME_ID = B.L_DATA_DAY_ID AND B.LAST_WEEK = 1'
										 + ' INNER JOIN PMART.PRD_GRP AS C ON C.GRP_ID = A.PRD_ID '
										 + ' INNER JOIN PMART.ORG_DIM_POSI1 AS D ON C.KND_ID=D.KND_ID AND C.GRP_ID=D.GRP_ID '
										 + ' INNER JOIN PMART.PRD_KND AS F ON F.KND_ID = D.KND_ID '
										 + M_SQLJOIN + M_SQLGROUP ;						 	
    END IF; 	
	 SET M_SQLSTR =  M_SQLSTR    +  ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS; '; 
    INSERT INTO PMART.T1(F1,F2) SELECT 0,M_SQLSTR;					 
    EXECUTE IMMEDIATE M_SQLSTR;   
END SP;