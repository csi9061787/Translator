REPLACE PROCEDURE PMART.NEW_TOP_MODULE_1
(FP_AMT_TYPE CHAR,FP_TIME_TYPE CHAR,
FP_TIME_LIST VARCHAR(2000),FP_LTIME_LIST VARCHAR(2000),
FP_ORG_LEVEL NUMBER,FP_ORG_LIST VARCHAR(2000),
FP_PRD_TYPE CHAR,FP_PRD_LEVEL NUMBER,FP_PRD_ID VARCHAR(7))
SQL SECURITY INVOKER
SP:BEGIN
DECLARE SQLSTR  VARCHAR(64000);
   CALL PMART.P_DROP_TABLE ('#VT_NEW_TOP_MODULE_1');    
   CALL PMART.NEW_TOP_MFACT_1(FP_AMT_TYPE,FP_TIME_TYPE ,FP_TIME_LIST ,FP_LTIME_LIST ,FP_ORG_LEVEL ,FP_ORG_LIST ,FP_PRD_TYPE ,FP_PRD_LEVEL ,FP_PRD_ID );
   CALL PMART.NEW_TOP_STFACT(FP_TIME_TYPE ,FP_TIME_LIST ,FP_LTIME_LIST ,FP_ORG_LEVEL ,FP_ORG_LIST ,FP_PRD_TYPE ,FP_PRD_LEVEL ,FP_PRD_ID );   					
   SET SQLSTR = 'CREATE MULTISET VOLATILE TABLE #VT_NEW_TOP_MODULE_1  AS('+
                'SELECT '+
                'A.TIME_ID AS TIME_ID, '+
				'A.ORG_ID AS ORG_ID, '+
				'B.ORDER_STORE_NUM AS ORDER_STORE_NUM, '+
				'PMART.DIVIDE_BY_ZERO(B.ORDER_STORE_NUM,DECODE(B.MAST_STORE_NUM,0,NULL,B.MAST_STORE_NUM))*100 AS ORDER_STORE_RATE, '+
				'B.SALES_STORE_NUM AS SALES_STORE_NUM, '+
				'PMART.DIVIDE_BY_ZERO(B.SALES_STORE_NUM,DECODE(B.MAST_STORE_NUM,0,NULL,B.MAST_STORE_NUM))*100 AS SALES_STORE_RATE, '+
				'CASE WHEN A.SALES_CNT<=0 THEN NULL '+
				'ELSE A.CUST_NUM/A.SALES_CNT END AS BUY_RATE, '+
				'B.SALES_ORDER_STORE_NUM AS LEAD_STORE_NUM, '+
				'PMART.DIVIDE_BY_ZERO(B.SALES_ORDER_STORE_NUM,DECODE(B.MAST_STORE_NUM,0,NULL,B.MAST_STORE_NUM))*100 AS LEAD_STORE_RATE, '+
				'A.ORDER_AMT AS ORDER_AMT, '+
				'A.ORDER_AMT/DECODE(B.ORDER_STORE_NUM,0,NULL,B.ORDER_STORE_NUM) AS ORDER_AMT_AVG, '+
				'A.LORDER_AMT AS LORDER_AMT, '+
				'A.ORDER_AMT-A.LORDER_AMT AS LORDER_AMT_DIFF, '+
				'CASE WHEN '+
				'(A.ORDER_AMT/DECODE(A.LORDER_AMT,0,NULL,A.LORDER_AMT)*100)>=10000 THEN 9999.99 '+
				'WHEN '+
				'(A.ORDER_AMT/DECODE(A.LORDER_AMT,0,NULL,A.LORDER_AMT)*100)<=-10000 THEN -9999.99 '+
				'ELSE (A.ORDER_AMT/DECODE(A.LORDER_AMT,0,NULL,A.LORDER_AMT)*100) END '+
				'AS LORDER_AMT_RATE, '+
				'A.SALES_AMT AS SALES_AMT, '+
				'A.SALES_AMT/DECODE(B.SALES_STORE_NUM,0,NULL,B.SALES_STORE_NUM) AS SALES_AMT_AVG, '+
				'A.SALES_AMT/DECODE(B.MAST_STORE_NUM,0,NULL,B.MAST_STORE_NUM) AS SALES_AMT_MAST_AVG, '+
				'A.LSALES_AMT AS LSALES_AMT, '+
				'A.SALES_AMT-A.LSALES_AMT AS LSALES_AMT_DIFF, '+
				'CASE WHEN '+
				'(A.SALES_AMT/DECODE(A.LSALES_AMT,0,NULL,A.LSALES_AMT)*100)>=10000 THEN 9999.99 '+
				'WHEN '+
				'(A.SALES_AMT/DECODE(A.LSALES_AMT,0,NULL,A.LSALES_AMT)*100)<=-10000 THEN -9999.99 '+
				'ELSE (A.SALES_AMT/DECODE(A.LSALES_AMT,0,NULL,A.LSALES_AMT)*100) END '+
				'AS LSALES_AMT_RATE, '+
				'A.THROW_AMT AS THROW_AMT, '+
				'A.THROW_AMT/DECODE(B.THROW_STORE_NUM,0,NULL,B.THROW_STORE_NUM) AS THROW_AMT_AVG, '+
				'A.LTHROW_AMT AS LTHROW_AMT, '+
				'A.THROW_AMT/DECODE(A.ORDER_AMT,0,NULL,A.ORDER_AMT)*100 AS THROW_AMT_RATE, '+
				'A.ORDER_CNT AS ORDER_CNT, '+
				'A.ORDER_CNT/DECODE(B.ORDER_STORE_NUM,0,NULL,B.ORDER_STORE_NUM) AS ORDER_CNT_AVG, '+
				'A.LORDER_CNT AS LORDER_CNT, '+
				'A.ORDER_CNT-A.LORDER_CNT AS LORDER_CNT_DIFF, '+
				'CASE WHEN '+
				'(A.ORDER_CNT/DECODE(A.LORDER_CNT,0,NULL,A.LORDER_CNT)*100)>=10000 THEN 9999.99 '+
				'WHEN '+
				'(A.ORDER_CNT/DECODE(A.LORDER_CNT,0,NULL,A.LORDER_CNT)*100)<=-10000 THEN -9999.99 '+
				'ELSE (A.ORDER_CNT/DECODE(A.LORDER_CNT,0,NULL,A.LORDER_CNT)*100) END '+
				'AS LORDER_CNT_RATE, '+
				'A.SALES_CNT AS SALES_CNT, '+
				'A.SALES_CNT/DECODE(B.SALES_STORE_NUM,0,NULL,B.SALES_STORE_NUM) AS SALES_CNT_AVG, '+
				'A.SALES_CNT/DECODE(B.MAST_STORE_NUM,0,NULL,B.MAST_STORE_NUM) AS SALES_CNT_MAST_AVG, '+
				'A.LSALES_CNT AS LSALES_CNT, '+
				'A.SALES_CNT-A.LSALES_CNT AS LSALES_CNT_DIFF, '+
				'CASE WHEN '+
				'(A.SALES_CNT/DECODE(A.LSALES_CNT,0,NULL,A.LSALES_CNT)*100)>=10000 THEN 9999.99 '+
				'WHEN '+
				'(A.SALES_CNT/DECODE(A.LSALES_CNT,0,NULL,A.LSALES_CNT)*100)<=-10000 THEN -9999.99 '+
				'ELSE (A.SALES_CNT/DECODE(A.LSALES_CNT,0,NULL,A.LSALES_CNT)*100) END '+
				'AS LSALES_CNT_RATE, '+
				'A.THROW_CNT AS THROW_CNT, '+
				'A.THROW_CNT/DECODE(B.THROW_STORE_NUM,0,NULL,B.THROW_STORE_NUM) AS THROW_CNT_AVG, '+
				'A.LTHROW_CNT AS LTHROW_CNT, '+
				'A.THROW_CNT/DECODE(A.ORDER_CNT,0,NULL,A.ORDER_CNT)*100 AS THROW_CNT_RATE '+
                'FROM '+
                 '  #VT_NEW_TOP_MFACT_1 A LEFT JOIN  '+
                 '  #VT_NEW_TOP_STFACT B  '+
                 'ON (A.TIME_ID=B.TIME_ID AND A.ORG_ID=B.ORG_ID) '+
             ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
	EXECUTE IMMEDIATE SQLSTR;
END SP;