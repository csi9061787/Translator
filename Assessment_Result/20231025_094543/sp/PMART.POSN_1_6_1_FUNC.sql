REPLACE PROCEDURE PMART.POSN_1_6_1_FUNC
(
FP_TIME_TYPE CHAR,         
FP_TIME_LIST VARCHAR(400), 
FP_ORG_LEVEL NUMBER,       
FP_ORG_LIST  VARCHAR(400), 
FP_PRD_LEVEL VARCHAR(400), 
FP_PRD_ID    VARCHAR(4000), 
FP_MMA_LEVEL NUMBER,       
FP_MMA_ID    VARCHAR(400), 
FP_AMT_TYPE  VARCHAR(400)  
)            
SQL SECURITY INVOKER
SP:BEGIN
   DECLARE SQLSTR        VARCHAR(8000);
   DECLARE BASE_AMTUNIT  NUMBER;        
   DECLARE V_SQL_DATA    VARCHAR(8000); 
   DECLARE V_TIME_SQL    VARCHAR(200);  
   DECLARE V_TABLE_NAME  VARCHAR(100);  
   DECLARE V_MMA_WHERE   VARCHAR(200);  
   DECLARE V_TIME_RANGE   VARCHAR(200); 
   DECLARE V_TIME_TABLE   VARCHAR(200); 
   CALL PMART.P_DROP_TABLE ('#VT_POSN_1_6_1_FUNC'); 
   CALL PMART.P_DROP_TABLE ('#VT_POSN_1_6_1_FUNC_TEMP'); 
   SET V_TIME_SQL = ' ';
   SET V_MMA_WHERE = ' ';
   IF FP_AMT_TYPE='T' THEN SET BASE_AMTUNIT = 1000;  ELSE SET  BASE_AMTUNIT = 1;  END IF;
   IF FP_TIME_TYPE = 'W' THEN
      SET V_TIME_SQL ='SELECT L_DAY_ID,L_WEEK_ID AS P_TIME_ID FROM PMART.YMWD_TIME_W2 WHERE L_DAY_ID < TO_CHAR(CURRENT_DATE,''YYYYMMDD'') ';
   END IF;
   IF FP_MMA_LEVEL = 1 THEN
     IF (FP_TIME_TYPE='D' OR FP_TIME_TYPE='W') AND FP_PRD_LEVEL='PRD' THEN 
		SET V_TABLE_NAME = 'PMART.FACT_SALES_TIME_DETAIL';
     ELSE 
		SET V_TABLE_NAME = 'PMART.FACT_SALES_TIME';
     END IF;
   ELSE
     IF (FP_TIME_TYPE='D' OR FP_TIME_TYPE='W') AND FP_ORG_LEVEL=3 AND FP_PRD_LEVEL='PRD' THEN 
		SET V_TABLE_NAME = 'PMART.FACT_SALES_TIME_DETAIL';
     ELSE 
		SET V_TABLE_NAME = 'PMART.FACT_SALES_TIME';
     END IF;
   END IF;
  IF FP_ORG_LEVEL=-1 THEN   
      SET V_MMA_WHERE = ' TOT_ID='+ FP_ORG_LIST +' AND MMA_ID = '+ FP_MMA_ID +' ';
  ELSEIF FP_ORG_LEVEL=0 THEN   
      SET V_MMA_WHERE = ' PDEPT_ID='+ FP_ORG_LIST +' AND MMA_ID = '+ FP_MMA_ID +' ';
   ELSEIF FP_ORG_LEVEL=1 THEN
      SET V_MMA_WHERE = ' DEPT_ID='+ FP_ORG_LIST +' AND MMA_ID = '+ FP_MMA_ID +' ';
   ELSEIF FP_ORG_LEVEL=2 THEN
      SET V_MMA_WHERE = ' BRANCH_ID='+ FP_ORG_LIST +' AND MMA_ID = '+ FP_MMA_ID +' ';
   ELSE
      SET V_MMA_WHERE = ' OSTORE_ID='+ FP_ORG_LIST +' AND MMA_ID = '+ FP_MMA_ID +' ';
   END IF;
   SET V_SQL_DATA =
      'SUM(A.S_CNT) AS S_CNT,SUM(CAST(A.S_AMT AS DECIMAL(16,3)))/'+BASE_AMTUNIT+' AS S_AMT ';
  SET V_TIME_RANGE =
	  ' H.X AS TIME_RANGE, CASE WHEN A.TIME_RANGE = H.X THEN A.S_CNT ELSE 0 END AS S_CNT, CASE WHEN A.TIME_RANGE = H.X THEN A.S_AMT ELSE 0 END AS S_AMT ';
  SET V_TIME_TABLE =
	  ' CROSS JOIN (SELECT CAST(DAY_OF_CALENDAR AS INTEGER) -1 AS X FROM SYS_CALENDAR.CALENDAR  WHERE X BETWEEN 0 AND 23 ) AS H ';
   IF FP_MMA_LEVEL = 1 THEN 
     IF FP_TIME_TYPE = 'W' THEN 
        SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_POSN_1_6_1_FUNC_TEMP  AS('+
                    'SELECT  '+
                    'A.PRD_ID,A.TIME_RANGE,'+
                    ' '+V_SQL_DATA+' FROM ( '+
					' SELECT A.PRD_ID, '+V_TIME_RANGE+
                    ' FROM '+ V_TABLE_NAME +' A '+V_TIME_TABLE+
                    ' ,(SELECT OSTORE_ID FROM PMART.LAST_ORG_MMA_DIM WHERE '+ V_MMA_WHERE +') B,('+ V_TIME_SQL +') TT '+
                    ' WHERE TT.P_TIME_ID = '+ FP_TIME_LIST +' '+
                    ' AND A.TIME_ID = TT.L_DAY_ID '+
                    ' AND A.ORG_ID = B.OSTORE_ID '+
                    ' AND A.PRD_ID IN ('+ FP_PRD_ID + ') '+
                    ' AND A.TIME_ID <> TO_CHAR(CURRENT_DATE,''YYYYMMDD'') '+
                    ' ) A GROUP BY A.PRD_ID,A.TIME_RANGE'+
                    ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
     ELSE
        SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_POSN_1_6_1_FUNC_TEMP  AS('+
                    'SELECT  '+
                    'A.PRD_ID,A.TIME_RANGE,'+
                    ' '+V_SQL_DATA+' FROM ( '+
					' SELECT A.PRD_ID, '+V_TIME_RANGE+
                    ' FROM '+ V_TABLE_NAME +' A '+V_TIME_TABLE+
                    ' ,(SELECT OSTORE_ID FROM PMART.LAST_ORG_MMA_DIM WHERE '+ V_MMA_WHERE +') B '+
                    ' WHERE A.TIME_ID ='+ FP_TIME_LIST + ' '+
                    ' AND A.ORG_ID = B.OSTORE_ID '+
                    ' AND A.PRD_ID IN ('+ FP_PRD_ID + ') '+
                    ' ) A GROUP BY A.PRD_ID,A.TIME_RANGE'+
                    ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
     END IF;
   ELSE 
     IF FP_TIME_TYPE = 'W' THEN 
        SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_POSN_1_6_1_FUNC_TEMP  AS('+
                    'SELECT  '+
                    'A.PRD_ID,A.TIME_RANGE,'+
                    ' '+V_SQL_DATA+' FROM ( '+
					' SELECT A.PRD_ID, '+V_TIME_RANGE+
                    ' FROM '+ V_TABLE_NAME +' A ,('+ V_TIME_SQL +') TT '+V_TIME_TABLE+
                    ' WHERE TT.P_TIME_ID = '+ FP_TIME_LIST +' '+
                    ' AND A.TIME_ID = TT.L_DAY_ID '+
                    ' AND A.ORG_ID = '+ FP_ORG_LIST +' '+
                    ' AND A.PRD_ID IN ('+ FP_PRD_ID + ') '+
                    ' AND A.TIME_ID <> TO_CHAR(CURRENT_DATE,''YYYYMMDD'') '+
                    ' ) A GROUP BY A.PRD_ID,A.TIME_RANGE'+
                    ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
     ELSE 
        SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_POSN_1_6_1_FUNC_TEMP  AS('+
					' SELECT  '+
                    ' A.PRD_ID , A.TIME_RANGE,'+
                    ' '+V_SQL_DATA+' '+' FROM ('
					' SELECT A.PRD_ID, '+V_TIME_RANGE+
                    ' FROM '+ V_TABLE_NAME +' A '+V_TIME_TABLE+
                    ' WHERE A.TIME_ID ='+ FP_TIME_LIST + ' '+
                    ' AND A.ORG_ID = '+ FP_ORG_LIST +' '+
                    ' AND A.PRD_ID IN ('+ FP_PRD_ID + ') '+
                    ' ) A GROUP BY A.PRD_ID,A.TIME_RANGE'+
                    ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;';
     END IF;
   END IF;
  EXECUTE IMMEDIATE SQLSTR;
        SET SQLSTR ='CREATE MULTISET VOLATILE TABLE #VT_POSN_1_6_1_FUNC AS('+
                    'SELECT TIME_RANGE  AS TR_ID,PRD_ID AS PRD_ID,S_CNT AS CNT,S_AMT AS AMT FROM #VT_POSN_1_6_1_FUNC_TEMP ' +
                    ') WITH DATA NO PRIMARY INDEX ON COMMIT PRESERVE ROWS;'; 
      EXECUTE IMMEDIATE SQLSTR;                    
END SP;