package src.java.service.transducer;

import java.io.IOException;
import java.util.List;

import src.java.params.BasicParams;
import src.java.tools.ReadFileTool;
import src.java.tools.RegexTool;
import src.java.tools.TransduceTool;

public class TransformTransducer {
	public static String run(String fn, String fc) throws IOException {
		String result = "Success";
		String sql = getTransformSQL(fc);
		createSQLFile(fn, sql);
		
		return result;
	}
	
	//SQL轉換產檔
	private static String createSQLFile(String fn, String fc) throws IOException {
		System.out.println("createSQLFile");
		String result = "Success";
		String content = "\r\nSET NOCOUNT ON;\r\n\r\n" + TransduceTool.cleanSql(fc);
		
		/* 20220613 新增 create set table 更新為 create table 
		 *         remove .replaceAll("[Cc][Aa][Ss][Tt] *\\(|[Aa][Ss] *[Dd][Aa][Tt][Ee] *[Ff][Oo][Rr][Mm][Aa][Tt] *'[YyMmDdHhSs-]*'\\)","")
		 * */
		//content = TransduceTool.changeAddMonth(content)
		content = content
				.replaceAll("[^\\S][sS][eE][lL][^\\S]","select")
				.replaceAll("\\|\\|", "+")
				.replaceAll(RegexTool.getReg("Create MultiSet Table"),"Create Table")
				.replaceAll(RegexTool.getReg("Create Set Table"),"Create Table")
				.replaceAll(RegexTool.getReg("REPLACE VIEW"), "ALTER VIEW")
				.replaceAll(RegexTool.getReg("[Dd][Aa][Tt][Ee] [Ff][Oo][Rr][Mm][Aa][Tt] '[YyMmDdHhSs/\\-]*'"), "DATE")
				.replaceAll(RegexTool.getReg("COLLECT STATISTICS"), "UPDATE STATISTICS")
				.replaceAll(RegexTool.getReg(" +[Dd][Aa][Tt][Ee] +'"), " '")
				.replaceAll(RegexTool.getReg("SUBSTR"), "SUBSTRING")
				.replaceAll(RegexTool.getReg("oreplace\\("), "Replace(")
				;
		content = easyRemove(content);
		content = transformSingleSQL(content,fn);
		//20220613 	//content = TransduceTool.transduceSelectSQLTransduce(content);
		content = TransduceTool.transduceSelectSQLTransduce(content);
		//產檔
		String file = BasicParams.getTargetFileNm(fn);
		String[] arfn = file.split("\\\\");
		String frn = arfn[arfn.length-1];
		
		//產出檔名調整
		String fnn = frn.replace(".pl", ".sql").replace(".btq", ".sql");
		file = file.replace(frn, fnn);
		ReadFileTool.createFile(file,content);
		return result;
	}
	//產檔create select
	private static String createCreateSelectLst(String fn) throws IOException {
		System.out.println("buildCreateSelectListFile");
		String result = "Success";
		String file = BasicParams.getOutputPath() + "lst\\lst_create_select.txt";
		ReadFileTool.addFile(file,fn);
		return result;
	}
	//產檔index
	private static String createIndexLst(String target, String fn) throws IOException {
		System.out.println("buildIndexListFile");
		String result = "Success";
		String file = BasicParams.getOutputPath() + "lst\\lst_index.txt";
		ReadFileTool.addFile(file,fn + " " + target);
		return result;
	}
	//取得sql的部分
	private static String getTransformSQL(String fc) {
		String res = "";
		boolean flag = false;
		for(String line : fc.split("\r\n") ) {
			if(line.matches(RegexTool.getReg(" \\/\\* End of bteq script \\*\\/ "))) {
				flag = false;
				break;
			}
			if(flag) {
				res += line+"\r\n";
			}
			if(line.matches(RegexTool.getReg(" \\/\\* Add you bteq options here \\*\\/  "))) {
				flag = true;
			}
			
		}
		return res;
	}
	//拆分每一段語法並處裡
	private static String transformSingleSQL(String fc,String fn) throws IOException {
		String res = "";
		/*20220615  針對有含 like '%;%'的分號字元，先將%;%置換成TtEeSsTt 再處理
		 *         List<String> lstSql = RegexTool.getRegexTarget("(?!=;)[^;]*;",fc); 
		 *       =>List<String> lstSql = RegexTool.getRegexTarget("(?!=;)[^;]*;",fc.replaceAll("%;%","TtEeSsTt"));
		 * */

		List<String> lstSql = RegexTool.getRegexTarget("(?!=;)[^;]*;",fc.replaceAll("%;%","TtEeSsTt"));
		for(String sql : lstSql) {
			sql = sql.trim();
			if(sql.matches(RegexTool.getReg("[^;]*drop table[^;]*;"))) {
				//drop table
				int sqlindex=sql.replaceAll("[Dd][Rr][Oo][Pp]","drop").indexOf("drop");
				String BFsql="";
				if( sqlindex > 0) {
					BFsql=sql.substring(0,sqlindex);
					sql=sql.substring(sqlindex);
				}
				String tableNm = sql.replaceAll("( *[Dd][Rr][Oo][Pp] *[Tt][Aa][Bb][Ll][Ee] *)|;|( *--\\S* *)","").trim();
				String dropSql = BFsql+"IF OBJECT_ID(N'"+tableNm+"') IS NOT NULL \r\n"
				+"DROP TABLE "+tableNm+" ; \r\n";
				res += dropSql+"\r\n";
			}else if(sql.matches(RegexTool.getReg("[^;]*drop view[^;]*;"))) {
				//drop view
				int sqlindex=sql.replaceAll("[Dd][Rr][Oo][Pp]","drop").indexOf("drop");
				String BFsql="";
				if( sqlindex > 0) {
					BFsql=sql.substring(0,sqlindex);
					sql=sql.substring(sqlindex);
				}
				String tableVw = sql.replaceAll("( *[Dd][Rr][Oo][Pp] *[Vv][Ii][Ee][Ww] *)|;|( *--\\S* *)","").trim();
				String dropSql = BFsql+"IF OBJECT_ID(N'"+tableVw+"') IS NOT NULL \r\n"
				+"DROP VIEW "+tableVw+" ; \r\n";
				res += dropSql+"\r\n";
			}else if(sql.matches(RegexTool.getReg("[^;]*rename table [^;]*;"))) {
				//rename table
				int sqlindex=sql.replaceAll("[Rr][Ee][Nn][Aa][Mm][Ee]","rename").indexOf("rename");
				String BFsql="";
				if( sqlindex > 0) {
					//取出 rename 前面的字串
					BFsql=sql.substring(0,sqlindex);
					sql=sql.substring(sqlindex);
				}
				String[] tableNm = sql
						.replaceAll(RegexTool.getReg(",|rename table"), "")
						.split(" +[Tt][Oo] +");
				//20220613 update  
				//String renameSql = " exec sp_rename N'"+tableNm[0]+"', N'"+tableNm[1]+"'; \r\n\r\n";
				String renameSql = BFsql + "exec sp_rename '"+tableNm[0].replaceAll(" ", "")+"', '"+tableNm[1].replaceAll(RegexTool.getReg("\\$\\{[^\\.]*\\."),"").replaceAll(";", "")+"'; \r\n\r\n";
				res += renameSql;
			}else if(sql.matches(RegexTool.getReg("[^;]*create table [^;]*;"))) {
				/*20220615  針對有含 like '%;%'的分號字元，先將%;%置換成TtEeSsTt 再處理
				 *         String strCre=sql; =>String strCre=sql.replaceAll("TtEeSsTt","%;%"); 
				 * */

				String strCre=sql.replaceAll("TtEeSsTt","%;%");
				//create table
				List<String> lstIndex = RegexTool.getRegexTarget(RegexTool.getReg("(unique )?primary index \\([^\\)]*\\)"), strCre);
				if(!lstIndex.isEmpty()) {
					createIndexLst(lstIndex.get(0),fn);
					String strrpl = lstIndex.get(0).replaceAll("\\(", "\\\\\\(").replaceAll("\\)", "\\\\\\)");
					strCre = strCre.replaceAll(strrpl, "");
				}
				List<String> lstSelect = RegexTool.getRegexTarget(RegexTool.getReg("select"), strCre);
				if(!lstSelect.isEmpty()) {
					createCreateSelectLst(fn);
				}
				res += strCre + "\r\n\r\n";
			}else {
				res += sql + "\r\n\r\n";
			}
		}
		return res;
	}
	//拆分每一段語法並處裡
	private static String easyRemove(String fc) {
		
        /* 20220613 Modify .replaceAll("COMPRESS", "") => .replaceAll("COMPRESS[^\\r\\n]*", "")
         * 20220613 add    .replaceAll(RegexTool.getReg("\\slogon \\$\\{USERID\\}, \\$\\{PASSWD\\};"),"")
         * */
		String res = fc
			.replaceAll("COMPRESS[^\\r\\n]*", "")
			.replaceAll("\\.[Qq][Uu][Ii][Tt] *[0-9]*;", "")
			.replaceAll("[W][I][T][H] *[C][O][U][N][T]\\(\\*\\) *[B][Y] *\\w*", "")
			.replaceAll("[Cc][Oo][Mm][Mm][Ee][Nn][Tt]\\s*[Oo][Nn]\\s*[Tt][Aa][Bb][Ll][Ee][^;]*;","")
			.replaceAll(RegexTool.getReg(",? NO FALLBACK ,?"), "")
			.replaceAll(RegexTool.getReg(",? NO BEFORE JOURNAL ,?"), "")
			.replaceAll(RegexTool.getReg(",? NO AFTER JOURNAL ,?"), "")
			.replaceAll(RegexTool.getReg(",? CHECKSUM = DEFAULT ,?"), "")
			.replaceAll(RegexTool.getReg("\\.IF ERRORCODE <> 0 THEN"), "")
			.replaceAll(RegexTool.getReg("\\.SET ERROROUT STDOUT"), "")
			.replaceAll(RegexTool.getReg("\\.GOTO ERRORSFOUND"), "")
			.replaceAll(RegexTool.getReg("\\.LOGOFF;"), "")
			.replaceAll(RegexTool.getReg("\\.LABEL ERRORSFOUND"), "")
			.replaceAll(RegexTool.getReg("CHARACTER SET UNICODE NOT CASESPECIFIC"), "")
			.replaceAll(RegexTool.getReg("\\.logon \\$\\{USERID\\}, \\$\\{PASSWD\\};"),"")
			.replaceAll(RegexTool.getReg("\\slogon \\$\\{USERID\\}, \\$\\{PASSWD\\};"),"")
			.replaceAll(RegexTool.getReg("PARTITION BY RANGE_N\\([^\\)]*\\)"),"")
		;
		return res;
	}
}
