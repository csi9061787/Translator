package src.java.tools;

import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class RegexTool {
	// 取得符合正規表達式的字串
	public static List<String> getRegexTarget(String regex, String content) {
		List<String> lstRes = new ArrayList<String>();
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(content);
		while (m.find()) {
			for (int i = 0; i <= m.groupCount(); i++) {
				lstRes.add(m.group(i));
			}
		}
		return lstRes;
	}
	// 取得符合正規表達式的字串(原本的語法有時會出錯)
	public static List<String> getRegexTarget2(String regex, String content) {
		List<String> lstRes = new ArrayList<String>();
		Pattern p = Pattern.compile(regex);
		Matcher m = p.matcher(content);
		while (m.find()) {
			for (int i = 0; i < m.groupCount(); i++) {
				lstRes.add(m.group(i));
			}
		}
		return lstRes;
	}
	// 拆分成每個單詞
	public static List<String> getSingleWord(String content) {
		List<String> lstRes = new ArrayList<String>();
		Pattern p = Pattern.compile("\\S+");
		Matcher m = p.matcher(content);
		while (m.find()) {
			for (int i = 0; i <= m.groupCount(); i++) {
				lstRes.add(m.group(i));
			}
		}
		return lstRes;
	}
	// 正則表達式不區分大小寫
	public static String getReg(String str) {
		String[] ar = str.split("");
		String res = "";
		for (String s : ar) {
			if (s.matches("[A-Za-z]")) {
				res += "[" + s.toUpperCase() + s.toLowerCase() + "]";
			} else if (s.matches(" ")) {
				res += " *";
			} else {
				res += s;
			}
		}
		return res;
	}

	// 解決$造成比對失敗
	public static String encodeSQL(String sql) {
		String res = sql;
		res = res.replaceAll("\\$", "SsLlIi").replaceAll("\\.", "PpNnTt").replaceAll("\\?", "QqTtMm")
				.replaceAll("\\*", "SsTtRr").replaceAll("\\{", "LlBbBb").replaceAll("\\}", "RrBbBb")
				.replaceAll("\\[", "LlMmBb").replaceAll("\\]", "RrMmBb").replaceAll("\\(", "LlSsBb")
				.replaceAll("\\)", "RrSsBb");
		return res;
	}

	public static String decodeSQL(String sql) {
		String res = sql;
		res = res.replaceAll("SsLlIi", "\\$").replaceAll("PpNnTt", ".").replaceAll("QqTtMm", "?")
				.replaceAll("SsTtRr", "*").replaceAll("LlBbBb", "{").replaceAll("RrBbBb", "}").replaceAll("LlMmBb", "[")
				.replaceAll("RrMmBb", "]").replaceAll("LlSsBb", "(").replaceAll("RrSsBb", ")");
		return res;
	}
}
